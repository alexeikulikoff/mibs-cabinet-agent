/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mibs.init.cabinet;


import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.concurrent.TimeoutException;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.apache.commons.lang3.SerializationUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class CabinetAgent extends Actions{
	
	private static final int PORT=5672;
	private static final Logger logger = LogManager.getLogger(CabinetAgent.class.getName());
	
	private static final String MAIN_CAPTION = "MAIN_CAPTION";
	private static final String ABOUT = "ABOUT";
	private static final String LABEL_ABOUT = "LABEL_ABOUT";
	
	private static final String LABEL_EXIT = "LABEL_EXIT";
	
	ResourceBundle bundle = ResourceBundleUTF8.getBundle("application");
	

	public String getGreeting() {
		return "Hello world.";
	}
	public CabinetAgent(String conf) {
		super( conf );
	}
	
	private Optional<Channel> connectToRabbit(String host, String login, String password) {
		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost( host );
		factory.setUsername( login );
		factory.setPassword( password );
		factory.setPort(PORT);
	
		Connection connection;
		Channel channel = null;
		try {
			connection = factory.newConnection();
			channel = connection.createChannel();
		
		} catch (IOException e) {
			logger.error("Error! IO Exception with message: " + e.getMessage());
			exit();
		} catch (TimeoutException e) {
			logger.error("Error! Timeout Exception with message: " + e.getMessage());
			exit();
		}

		return channel != null ? Optional.of(channel) : Optional.empty();

	}
	
	private void run() {
	  
	  createAndShowGUI();
	  
		Optional<Channel> optionalLocalChannel = connectToRabbit( rabbitmqHost, rabbitmqLogin, rabbitmqPassword );
		if (!optionalLocalChannel.isPresent()) {
			logger.error("Error! Fail to make connection to local rabbitmq.");
			exit() ;
		}
		channel = optionalLocalChannel.get();
		
		try {
			channel.queueDeclare(localInQueue, true, false, false, null);
			channel.queueDeclare(localOutQueue, true, false, false, null);
			channel.queueDeclare(inboundQueue, true, false, false, null);
			
			channel.exchangeDeclare(directExchange, "direct", true, false, null);
			
			DeliverCallback deliveryCallback = (consumerTag, delivery) -> {
				
				RabbitmqCommandMessage<?> msg = (RabbitmqCommandMessage<?>) SerializationUtils.deserialize(delivery.getBody());
				
				commands.get( msg.getCommand() ).accept( msg );
			};
			channel.basicConsume(localInQueue, true, deliveryCallback, consumerTag -> { });
			channel.basicConsume(inboundQueue, true, deliveryCallback, consumerTag -> { });
			
		} catch (IOException e) {
			logger.error("Error! IO Exception while declearing queue:  " + inboundQueue + " with message: " + e.getMessage());
			exit();
		}
		

	}

	 private  void createAndShowGUI()  {
    
     if (!SystemTray.isSupported()) {
       
       logger.error("Error! SystemTray is not supported");
       exit();
       
     }
     
     final PopupMenu popup = new PopupMenu();
     final TrayIcon trayIcon = new TrayIcon(createImage("Radiation.png", "tray icon"));
     final SystemTray tray = SystemTray.getSystemTray();
    
     
     MenuItem aboutItem = new MenuItem(  bundle.getString(LABEL_ABOUT) );
     MenuItem exitItem = new MenuItem(  bundle.getString(LABEL_EXIT) );
    
     popup.add(aboutItem);
     popup.addSeparator();
  
     popup.add(exitItem);

     trayIcon.setPopupMenu(popup);
    
     try {
      tray.add(trayIcon);
      trayIcon.addActionListener( new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          JOptionPane.showMessageDialog(null, "This dialog box is run from System Tray");
        }
      });

      aboutItem.addActionListener( new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          String template = bundle.getString(ABOUT);
          String message =   MessageFormat.format( template , channel.getConnection().getAddress().toString());
          JOptionPane.showMessageDialog(null, message);
        }
      });

      exitItem.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          tray.remove(trayIcon);
          exit();
        }
      });
     } catch (AWTException e1) {
       logger.error("Error! AWTException with message : " + e1.getMessage());
       
       exit(); 
    }
   }

  
   protected  Image createImage(String path, String description) {
     //URL imageURL = App.class.getResource(path);
     URL imageURL = CabinetAgent.class.getClassLoader().getResource(path);
     if (imageURL == null) {
       logger.error("Resource not found: " + path);
       return null;
     } else {
       return (new ImageIcon(imageURL, description)).getImage();
     }
   }
 
  protected static void exit() {
    System.exit(0);
  }
	public static void main(String[] args) {

	  if (args != null && args.length > 0) {
	
		} else {
		  JOptionPane.showMessageDialog(null, "Message error : Where is config file?");
		  exit() ;
		}
	 
    try {
      UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
      //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
    } catch (UnsupportedLookAndFeelException ex) {
      
      logger.error("Error! UnsupportedLookAndFeelException with message : " + ex.getMessage());
      
      exit(); 
    } catch (IllegalAccessException ex) {

      logger.error("Error! IllegalAccessException with message : " + ex.getMessage());
      exit() ;
    } catch (InstantiationException ex) {
     
      logger.error("Error! InstantiationException with message : " + ex.getMessage());
      exit() ;
    } catch (ClassNotFoundException ex) {
      
      logger.error("Error! ClassNotFoundException with message : " + ex.getMessage());
      exit() ;
    }
   
    UIManager.put("swing.boldMetal", Boolean.FALSE);
   
    
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
       
          CabinetAgent app = new CabinetAgent( args[0] );
          app.run();
      }
    }); 
  }
}
	
	
	
	

